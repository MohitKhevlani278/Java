--------------------------------------------------Question Paper-1----------------------------------------------------------------
Q- 4 : A 1Marks

1)________invented Hibernate framework
- Gavin King  

2)ORM Stands for :-
- Object Realtional Mapping

3)EJB Stands for :-
- Enterprise JavaBeans


Q- 4 : B 3Marks

1)Explain Session in EJB :-
 - Session is limited interval of time in which two systems communicate with each other.
 - Use to maintaining state of the user. 
 
 SessionBean :-
 - Session bean encapsulates business logic that can be invoked programmatically by a client over local, remote, or web service 
   client views.
     
 Types Of SessionBean :-
 1)Stateless :- 
 - Doesn't maintain state of a client between multiple requests.

 2)Stateful :- 
 - Maintains state of a client across multiple requests.
 
 3)Singleton :- 
 - One instance per application, it is shared between clients and supports concurrent access


2)Explain rols of model in mvc design pattern :-
 - Model View Controller (MVC) is latest design pattern in software development that specifies application consist of a data model, 
   presentation information, and control information. 
 
 Diagram :- https://media.geeksforgeeks.org/wp-content/uploads/MVC-Design-Pattern.png

 - Model contains only pure application data, it not contains logic about how to present data to a user.
 - Manages Business logic with the database access.
 - Controller send request to the model for processing user requests and response of the request returns back to the controller by model.


3)Explain Hibernate Configuration File and Properties File :- 
 - Hibernate Configuration File(cfg file) is the uses to establish connection to the database server.
 - It is an XML file which name is hibernate.cfg.xml.
 - There must be one configuration file for each database used in the application
 - We can acquire the Configuration class instance by instantiating it directly and specifying mappings in the configuration file. 
 - Use the addResource() method, if the mapping files are present in the classpath.
 Syntax :- Configuration cfg = new Configuration().addResource("employee.hbm.xml")  

 Files :-
 <?xml>  :- 
 - Defines the version and encoding type used for the XML document.
 
 <DOCTYPE> :- 
 - Specifies the Document Type Definition (DTD) for the XML  elements. 
 - DTD specifies the grammar rule for the XML document. For  example, DTD for hibernate.cfg.xml file is specified as  
   http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd.

 <hibernate-configuration> :-  
 - Specifies all the configuration details  that the application uses to communicate with the underlying database.
 
 <session-factory> :- 
 - Contains the database and application specific  properties that a Session object uses to establish a communication link  
   between the application and the database.

 <property> :- 
 - Defines the various properties that are required to connect  with the database.
 
 <mapping> :- 
 - Specifies the name of the Hibernate mapping file that defines the mapping of a database table to a class.

 Example :-
 <?xml version="1.0" encoding="utf-8"?>
 <!DOCTYPE hibernate-configuration SYSTEM "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
 <hibernate-configuration>
    <session-factory>
        
        <property name="hibernate.dialect"> org.hibernate.dialect.MySQLDialect </property>
        <property name="hibernate.connection.driver_class"> com.mysql.jdbc.Driver </property>
        
        <!-- Assume test is the database name -->
        <property name="hibernate.connection.url"> jdbc:mysql://localhost/test </property>
        <property name="hibernate.connection.username"> root </property>
        <property name="hibernate.connection.password"> root123 </property>
        
        <!-- List of XML mapping files -->
        <mapping resource="Employee.hbm.xml"/>

    </session-factory>
</hibernate-configuration>
 

4)Explain Annotation? :-
 - Hibernate Annotations is the powerful way to provide the metadata for the Object and Relational Table mapping. 
 - JPA annotations are used in mapping java objects to the database tables, columns etc
 - All the metadata is clubbed into the POJO java file along with the code, this helps the user to understand the table structure 
   and POJO simultaneously during the development
 - Hibernate annotations is the newest way to define mappings without a use of XML file.
 - You can use annotations in addition to or as a replacement of XML mapping metadata.


  Hibernate Annotation :-
  @Entity :- 
  - Is used to specify a class as an entity bean. It is contained inside the javax.persistence package.

  @Table :- 
  - Used to specify the name of the table. 

  @Column :- 
  - used to specify the column name. 
  - It contains the following attributes:
     name     : Specifies the name of the column.
     length   : Specifies the length of the column.
     nullable : Specifies the column to be NOT NULL.
     unique   : Specifies the column to contain unique values.

  @Id :- 
  -Used to define the column as an identifier or a primary key.

  @GeneratedValue :- 
  - Specify the identifier generation  strategy. 
    Types :-
      AUTO
      IDENTITY
      SEQUENCE
      TABLE
  
  @OrderBy :- Sort your data using @OrderBy annotation
 
  @Transient :- Every non static and non-transient property of an entity is considered persistent, unless you annotate it as @Transient

  @Lob :- Large objects are declared with @Lob
 
  Annotations for Mapping between tables :-
  - @OneToOne 
  - @ManyToOne
  - @OneToMany
  - @PrimaryKeyJoinColumn
  - @JoinColumn 


Q- 4 : C 5Marks
1)Explain implementation of MVC Architecture :-
- 

2)Explain Inheritance Annotation :-
 - In the previous page, we have mapped the inheritance hierarchy with one table only using xml file. 
 - Here, we are going to perform this task using annotation. 
 - You need to use @Inheritance(strategy=InheritanceType.SINGLE_TABLE), @DiscriminatorColumn and @DiscriminatorValue annotations 
   for mapping table per hierarchy strategy. 
 - In case of table per hierarchy, only one table is required to map the inheritance hierarchy. 
 - Here, an extra column (also known as discriminator column) is created in the table to identify the class.

 Example :-
 import javax.persistence.*; 
 @Entity  

 @Table(name = "employee101")

 @Inheritance(strategy=InheritanceType.SINGLE_TABLE)

 @DiscriminatorColumn(name="type",discriminatorType=DiscriminatorType.STRING) 

 @DiscriminatorValue(value="employee")
 
 public class Employee {  
    @Id  
    
    @GeneratedValue(strategy=GenerationType.AUTO)    
    
    @Column(name = "id")  
    private int id;
    
    @Column(name = "name")  
    private String name;    
    
    //setters and getters  }  



--------------------------------------------------Question Paper-2----------------------------------------------------------------

Q- 4 : A 1Marks
1)Hibernate.cfg.xml file is a ______ file :-
- Configuration File

2)Define MVC :-
- Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: 
  the model, the view, and the controller. 

3)What is ORM :-
- ORM stands for Object-Relational Mapping (ORM) is a programming technique for converting data between relational databases 
  and object oriented programming languages such as Java, C#, etc. 

4)What is EJB :-
- Enterprise JavaBeans (EJB) is a specification for developing large-scale, distributed business applications on the Java platform.

Q- 4 : B 2Marks
1)What is EntityBean        :- 
 - Used to manage data which is persistent, to perform complex business logic and can be uniquely identified by making use of 
   primary key is known as an entity bean
 - An “entity bean” is a business encodes persistent object which forms and integral part of JAVA Enterprise edition. 
 - They can persistent independently or can delegate this to the container. 
 - A container is used to host the EJB Services and in case container or server crashes, then also beans survive the crash as 
   these are linked to primary keys present in the database.
  
  Types :- 
  1)Container Managed Persistence (CMP) 
  2)Bean-Managed Persistence (BMP). 


2)List-Out types of EJB     :- 
- Enterprise JavaBeans (EJB) is a specification for developing large-scale, distributed business applications on the Java platform.

 Types Of EJB :- 
  
  1)SessionBean :-
  - Session bean encapsulates business logic that can be invoked programmatically by a client over local, remote, or web service 
    client views.
     
   Types Of SessionBean :-
    1)Stateless :- 
    - Doesn't maintain state of a client between multiple requests.

    2)Stateful :- 
    - Maintains state of a client across multiple requests.
 
    3)Singleton :- 
    - One instance per application, it is shared between clients and supports concurrent access

  2)EntityBean :-
  - Used to manage data which is persistent, to perform complex business logic and can be uniquely identified by making use of 
    primary key is known as an entity bean

  3)Message-Driven Bean :- 
  - allowed to process messages asynchronously by making use of message driven beans with the help of JMS(Java Message Service)


Q- 4 : C 3Marks
1)Explain Message driven beans    :-
 - A message-driven bean combines features of a session bean and a Java Message Service (JMS) message listener, allowing a business 
   component to receive JMS. 
 - message-driven bean enables asynchronous clients to access the business logic in the EJB tier. 

 Timer Service :-
 - Timer Service is a mechanism using which scheduled application can be build. 
 - EJB 3.0 specification has specified @Timeout annotation which helps in programming the ejb service in a stateless or message 
   driven bean. 
 - EJB Container calls the method which is annotated by @Timeout.
 - EJB Timer Service is a service provided by Ejb container which helps to create timer and to schedule callback when timer expires. 


2)What is Annotation?Explain It?  :- Alerdy in QuestionPaper-1


Q- 4 : D 5Marks
1)Explain Hibernate Session :-
 - A Session is used to get a physical connection with a database. 
 - The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database.
 - Persistent objects are saved and retrieved through a Session object.
 - The session objects should not be kept open for a long time because they are not usually thread safe and they should be created 
   and destroyed them as needed.
 - The main function of the Session is to offer create, read and delete operations for instances of mapped entity classes.
 - Instances may exist in one of the following three states at a given point in time:
 - A Session instance is serializable if its persistent classes are serializable. 

 1)transient :- 
 - A new instance of a persistent class which is not associated with a Session and has no representation in the database and no 
   identifier value is considered transient by Hibernate.

 2)persistent :- 
 - You can make a transient instance persistent by associating it with a Session. 
 - A persistent instance has a representation in the database, an identifier value and is associated with a Session.
 
 3)detached :-
 - Once we close the Hibernate Session, the persistent instance will become a detached instance
  
 Example:- Session session = factory.openSession(); 
           Transaction tx = null; 
           try { 
                    tx = session.beginTransaction(); // do some work ... 
                    tx.commit(); 
                }
            catch (Exception e) 
            { 
                if (tx!=null) tx.rollback(); 
                e.printStackTrace(); 
            }
            finally 
            { session.close(); } 
    
 - If the Session throws an exception, the transaction must be rolled back and the session must be discarded.


2)Explain implementation of MVC Architecture                :- Alerdy in QuestionPaper-1


--------------------------------------------------Question Paper-3----------------------------------------------------------------

Q - 4 : A 1Marks
1)Define MVC                              :- Alerdy in QuestionPaper-2
2)Give Fullform Of EJB & ORM              :- Alerdy in QuestionPaper-1
3)List-Out types of EJB                   :- 
 - Session Bean
 - Entity Bean
 - Message-Driven Bean

4)________invented Hibernate framework    :- Alerdy in QuestionPaper-1


Q- 4 : B 2Marks
1)Explain rols of model in mvc design pattern              :- Alerdy in QuestionPaper-1 2Marks
2)Explain Message driven beans                             :- Alerdy in QuestionPaper-2 2Marks

Q- 4 : C 3Marks 
1)Explain Hibernate Configuration File and Properties File :- Alerdy in QuestionPaper-1
2)Explain Session in EJB                                   :- Alerdy in QuestionPaper-1

Q- 4 : D 5Marks
1)Explain MVC Architecture  :-
2)Explain Inheritance Annotation             :- Alerdy in QuestionPaper-1
